{
    "guides": [
        {
            "title": "Basic SELECT Statements",
            "content": "The SELECT statement is used to select data from a database. Syntax: SELECT column1, column2 FROM table_name;"
        },
        {
            "title": "WHERE Clause",
            "content": "The WHERE clause is used to filter records. Syntax: SELECT column1, column2 FROM table_name WHERE condition;"
        },
        {
            "title": "INSERT INTO Statement",
            "content": "The INSERT INTO statement is used to insert new records into a table. Syntax: INSERT INTO table_name (column1, column2) VALUES (value1, value2);"
        },
        {
            "title": "UPDATE Statement",
            "content": "The UPDATE statement is used to modify existing records in a table. Syntax: UPDATE table_name SET column1 = value1 WHERE condition;"
        },
        {
            "title": "DELETE Statement",
            "content": "The DELETE statement is used to delete records from a table. Syntax: DELETE FROM table_name WHERE condition;"
        },
        {
            "title": "CREATE TABLE Statement",
            "content": "The CREATE TABLE statement is used to create a new table in the database. Syntax: CREATE TABLE table_name (column1 datatype, column2 datatype);"
        },
        {
            "title": "ALTER TABLE Statement",
            "content": "The ALTER TABLE statement is used to add, delete, or modify columns in an existing table. Syntax: ALTER TABLE table_name ADD column_name datatype;"
        },
        {
            "title": "DROP TABLE Statement",
            "content": "The DROP TABLE statement is used to delete a table. Syntax: DROP TABLE table_name;"
        },
        {
            "title": "SELECT DISTINCT Statement",
            "content": "The SELECT DISTINCT statement is used to return only distinct (different) values. Syntax: SELECT DISTINCT column1, column2 FROM table_name;"
        },
        {
            "title": "ORDER BY Clause",
            "content": "The ORDER BY clause is used to sort the result set in ascending or descending order. Syntax: SELECT column1, column2 FROM table_name ORDER BY column1 ASC|DESC;"
        },
        {
            "title": "GROUP BY Clause",
            "content": "The GROUP BY clause is used to group rows that have the same values into summary rows. Syntax: SELECT column1, COUNT(column2) FROM table_name GROUP BY column1;"
        },
        {
            "title": "HAVING Clause",
            "content": "The HAVING clause is used to filter records that have been grouped by the GROUP BY clause. Syntax: SELECT column1, COUNT(column2) FROM table_name GROUP BY column1 HAVING COUNT(column2) > value;"
        },{
            "title": "JOIN Clause",
            "content": "The JOIN clause is used to combine rows from two or more tables, based on a related column between them. Types: INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL OUTER JOIN. Syntax: SELECT columns FROM table1 JOIN table2 ON table1.column = table2.column;"
        },
        {
            "title": "INNER JOIN",
            "content": "The INNER JOIN keyword selects records that have matching values in both tables. Syntax: SELECT columns FROM table1 INNER JOIN table2 ON table1.column = table2.column;"
        },
        {
            "title": "LEFT JOIN (LEFT OUTER JOIN)",
            "content": "The LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). Syntax: SELECT columns FROM table1 LEFT JOIN table2 ON table1.column = table2.column;"
        },
        {
            "title": "RIGHT JOIN (RIGHT OUTER JOIN)",
            "content": "The RIGHT JOIN keyword returns all records from the right table (table2), and the matched records from the left table (table1). Syntax: SELECT columns FROM table1 RIGHT JOIN table2 ON table1.column = table2.column;"
        },
        {
            "title": "FULL OUTER JOIN",
            "content": "The FULL OUTER JOIN keyword returns all records when there is a match in either left (table1) or right (table2) table records. Syntax: SELECT columns FROM table1 FULL OUTER JOIN table2 ON table1.column = table2.column;"
        },
        {
            "title": "UNION Operator",
            "content": "The UNION operator is used to combine the result-set of two or more SELECT statements. Syntax: SELECT column1, column2 FROM table1 UNION SELECT column1, column2 FROM table2;"
        },
        {
            "title": "UNION ALL Operator",
            "content": "The UNION ALL operator is used to combine the result-set of two or more SELECT statements, allowing duplicate values. Syntax: SELECT column1, column2 FROM table1 UNION ALL SELECT column1, column2 FROM table2;"
        },
        {
            "title": "NULL Values",
            "content": "The NULL value represents a value that is unavailable, unassigned, unknown, or inapplicable. Syntax: SELECT column1 FROM table_name WHERE column1 IS NULL;"
        },
        {
            "title": "NOT NULL Constraint",
            "content": "The NOT NULL constraint ensures that a column cannot have a NULL value. Syntax: CREATE TABLE table_name (column1 datatype NOT NULL, column2 datatype);"
        },
        {
            "title": "DEFAULT Constraint",
            "content": "The DEFAULT constraint provides a default value for a column when none is specified. Syntax: CREATE TABLE table_name (column1 datatype DEFAULT value, column2 datatype);"
        },
        {
            "title": "CHECK Constraint",
            "content": "The CHECK constraint ensures that all values in a column satisfy a specific condition. Syntax: CREATE TABLE table_name (column1 datatype, column2 datatype CHECK (condition));"
        },
        {
            "title": "AUTO_INCREMENT (MySQL) / SERIAL (PostgreSQL)",
            "content": "The AUTO_INCREMENT attribute in MySQL or SERIAL in PostgreSQL is used to generate a unique identifier for new rows. Syntax (MySQL): CREATE TABLE table_name (id INT AUTO_INCREMENT PRIMARY KEY, column2 datatype); Syntax (PostgreSQL): CREATE TABLE table_name (id SERIAL PRIMARY KEY, column2 datatype);"
        },
        {
            "title": "INDEX",
            "content": "The INDEX is used to create and retrieve data from the database very quickly. Syntax: CREATE INDEX index_name ON table_name (column1, column2);"
        }
    ]
}
